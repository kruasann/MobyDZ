Vagrant.configure("2") do |config|
  # Используем образ Debian 12
  config.vm.box = "generic/debian12"

  # Настройка hostname
  config.vm.hostname = "OS-security"
  
  # Настройки VMware
  config.vm.provider "vmware_desktop" do |vmware|
    vmware.vmx["memsize"] = "4096"
    vmware.vmx["numvcpus"] = "4"
    vmware.vmx["ethernet0.natdnshostresolver1"] = "true"
    vmware.vmx["ethernet0.natdnsproxy1"] = "true"
  end  # Закрываем блок provider

  # Проброс SSH-ключа
  config.vm.provision "shell", inline: <<-SHELL
    mkdir -p /home/vagrant/.ssh
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCp7eiRguHxbdpYwnGkHoC78QFQMDVfitoJhvpbQgvcU7PWAd3eb0yVULZH9+LDBPZDQLX7E1dus3aJWdR0/jB62uBgtD90oEbdVcoRBydYbY9GVEnnfN9fimPU9vyHyt6MR2Hgpr+1BCKK8AOiXobYB/b2mVdGaeHVt7KcrV+hH7X8hvsjm/LEYxY3ZQGp+/wbKMHXib8XmJNlENIcthvL4xJU2gAC2ydyCa3U86S5zFv/02FmbfquopK3zPwK2uJuv6JKVoCE7MvlEkLtuOOIk6fFcxDIP8xvezD9Qd2XAjkQDIt6sxtWHOwsxdbIsp1CBtIAKdbvoA8vB2O5WkFMNp37oB0dNRcx3PgL/cJJJSYX1TW1mL5VMP7hkxkhNm5JHptbMx49xl0F8uKSS0CTQKUbBM7c0KH3X3laJvC3v3b2cT9bB4762BHC1WsxkS+IvAG6wt8j6xpXKQnHRxRtlcdhVXMsXlL1br94RIJqCllAbgxJz/zpmkF8xprlgQk= gkhly@DESKTOP-3INKQHN" >> /home/vagrant/.ssh/authorized_keys
    chmod 600 /home/vagrant/.ssh/authorized_keys
    chown vagrant:vagrant /home/vagrant/.ssh/authorized_keys
  SHELL

  # Настройка PolKit, ACL, iptables, chroot и debootstrap
  config.vm.provision "shell", inline: <<-SHELL
    # Установка переменной окружения для предотвращения интерактивных запросов
    export DEBIAN_FRONTEND=noninteractive

    echo "postfix postfix/mailname string OS-security" | debconf-set-selections
	echo "postfix postfix/main_mailer_type string 'OS-security'" | debconf-set-selections
	
	# Прописываем конфигурацию для iptables-persistent, чтобы избежать остановки на интерактивных оболочках
	echo "iptables-persistent iptables-persistent/autosave_v4 boolean true" | debconf-set-selections
	echo "iptables-persistent iptables-persistent/autosave_v6 boolean true" | debconf-set-selections

	# Обновляем систему и устанавливаем необходимые пакеты
    sudo apt-get update
    sudo apt-get upgrade -y --fix-missing
    sudo apt-get install -y acl iptables-persistent nginx debootstrap policykit-1 postfix network-manager packagekit

    # PolKit правила
    
    # Разрешаем изменение NetworkManager только для root
    echo 'polkit.addRule(function(action, subject) {
      if (action.id == "org.freedesktop.NetworkManager.*" &&
          subject.isInGroup("root")) {
        return polkit.Result.YES;
      }
      return polkit.Result.NO;
    });' | sudo tee /etc/polkit-1/rules.d/50-network-manager.rules
    
    # Разрешаем пользователям обновлять систему и устанавливать/удалять программы
    echo 'polkit.addRule(function(action, subject) {
		var allowedActions = [
			"org.debian.apt.update-cache",
			"org.debian.apt.upgrade-packages",
			"org.debian.apt.install-or-remove-packages"
		];

		if (allowedActions.indexOf(action.id) >= 0) {
			return polkit.Result.YES;
		}
	});' | sudo tee /etc/polkit-1/rules.d/50-package-management.rules

    # ACL: Запрещаем группе user доступ к файлам
    sudo groupadd -f user
	mkdir /home/Denied_Dir
	TARGET_DIR="/home/Denied_Dir"
	
    # Проверка поддержки ACL на файловой системе
    if mount | grep " ${TARGET_DIR} " | grep -q "acl"; then
        echo "ACL уже включены на ${TARGET_DIR}"
    else
        # Добавление опции acl в /etc/fstab для соответствующей точки монтирования
        # Определяем устройство и точку монтирования
        DEVICE=$(mount | grep " ${TARGET_DIR} " | awk '{print $1}')
        sudo sed -i "/${DEVICE}/ s/defaults/defaults,acl/" /etc/fstab

        # Перемонтирование с поддержкой ACL
        sudo mount -o remount,acl ${TARGET_DIR}
    fi

    # Применение ACL рекурсивно
    sudo setfacl -R -m g:user:--- ${TARGET_DIR}

    # Установка дефолтных ACL для новых файлов и директорий
    sudo setfacl -R -m d:g:user:--- ${TARGET_DIR}

    # iptables: Настройка правил
    sudo iptables -A INPUT -i lo -j ACCEPT # Разрешаем localhost
    sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT # Разрешаем SSH
    sudo iptables -A INPUT -p tcp --dport 80 -j DROP # Запрещаем HTTP
    sudo iptables -A INPUT -p tcp -s 10.210.19.0/24 --dport 443 -j ACCEPT # HTTPS для локальной сети
    sudo iptables -A INPUT -p tcp -s 10.210.19.0/24 --dport 8080 -j ACCEPT # Порт 8080 для локальной сети
    sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE # NAT
    
    # Сохраняем iptables
    sudo netfilter-persistent save

    # chroot и debootstrap
    sudo mkdir -p /srv/chroot
    sudo debootstrap --variant=minbase stable /srv/chroot http://deb.debian.org/debian/
    
    # Настраиваем chroot окружение
    sudo mount --bind /dev /srv/chroot/dev
    sudo mount --bind /proc /srv/chroot/proc
    sudo mount --bind /sys /srv/chroot/sys

    # Входим в chroot и устанавливаем nginx
    sudo chroot /srv/chroot /bin/bash -c "apt-get update && apt-get install -y nginx"

    # Запускаем nginx в chroot
    sudo chroot /srv/chroot /bin/bash -c "service nginx start"

	# Тестирование веб-приложения в chroot
    curl http://localhost
  SHELL
  end